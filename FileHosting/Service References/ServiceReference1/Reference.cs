//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FileHosting.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/FileHostingService")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateBegField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private FileHosting.ServiceReference1.File[] FilesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LoginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateBeg {
            get {
                return this.DateBegField;
            }
            set {
                if ((this.DateBegField.Equals(value) != true)) {
                    this.DateBegField = value;
                    this.RaisePropertyChanged("DateBeg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public FileHosting.ServiceReference1.File[] Files {
            get {
                return this.FilesField;
            }
            set {
                if ((object.ReferenceEquals(this.FilesField, value) != true)) {
                    this.FilesField = value;
                    this.RaisePropertyChanged("Files");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Login {
            get {
                return this.LoginField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginField, value) != true)) {
                    this.LoginField = value;
                    this.RaisePropertyChanged("Login");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="File", Namespace="http://schemas.datacontract.org/2004/07/FileHostingService")]
    [System.SerializableAttribute()]
    public partial class File : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] BytesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateAddField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FileIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long SizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Bytes {
            get {
                return this.BytesField;
            }
            set {
                if ((object.ReferenceEquals(this.BytesField, value) != true)) {
                    this.BytesField = value;
                    this.RaisePropertyChanged("Bytes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateAdd {
            get {
                return this.DateAddField;
            }
            set {
                if ((this.DateAddField.Equals(value) != true)) {
                    this.DateAddField = value;
                    this.RaisePropertyChanged("DateAdd");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FileId {
            get {
                return this.FileIdField;
            }
            set {
                if ((this.FileIdField.Equals(value) != true)) {
                    this.FileIdField = value;
                    this.RaisePropertyChanged("FileId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Size {
            get {
                return this.SizeField;
            }
            set {
                if ((this.SizeField.Equals(value) != true)) {
                    this.SizeField = value;
                    this.RaisePropertyChanged("Size");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Url {
            get {
                return this.UrlField;
            }
            set {
                if ((object.ReferenceEquals(this.UrlField, value) != true)) {
                    this.UrlField = value;
                    this.RaisePropertyChanged("Url");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IFileHostingService")]
    public interface IFileHostingService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileHostingService/RegistrNewUser", ReplyAction="http://tempuri.org/IFileHostingService/RegistrNewUserResponse")]
        FileHosting.ServiceReference1.User RegistrNewUser(FileHosting.ServiceReference1.User newUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileHostingService/RegistrNewUser", ReplyAction="http://tempuri.org/IFileHostingService/RegistrNewUserResponse")]
        System.Threading.Tasks.Task<FileHosting.ServiceReference1.User> RegistrNewUserAsync(FileHosting.ServiceReference1.User newUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileHostingService/CheckEnterUserPassword", ReplyAction="http://tempuri.org/IFileHostingService/CheckEnterUserPasswordResponse")]
        FileHosting.ServiceReference1.User CheckEnterUserPassword(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileHostingService/CheckEnterUserPassword", ReplyAction="http://tempuri.org/IFileHostingService/CheckEnterUserPasswordResponse")]
        System.Threading.Tasks.Task<FileHosting.ServiceReference1.User> CheckEnterUserPasswordAsync(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileHostingService/UpdateFileInfo", ReplyAction="http://tempuri.org/IFileHostingService/UpdateFileInfoResponse")]
        void UpdateFileInfo(FileHosting.ServiceReference1.File editFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileHostingService/UpdateFileInfo", ReplyAction="http://tempuri.org/IFileHostingService/UpdateFileInfoResponse")]
        System.Threading.Tasks.Task UpdateFileInfoAsync(FileHosting.ServiceReference1.File editFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileHostingService/DeleteFile", ReplyAction="http://tempuri.org/IFileHostingService/DeleteFileResponse")]
        void DeleteFile(int fileId, string fileName, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileHostingService/DeleteFile", ReplyAction="http://tempuri.org/IFileHostingService/DeleteFileResponse")]
        System.Threading.Tasks.Task DeleteFileAsync(int fileId, string fileName, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileHostingService/AddNewFile", ReplyAction="http://tempuri.org/IFileHostingService/AddNewFileResponse")]
        FileHosting.ServiceReference1.File AddNewFile(FileHosting.ServiceReference1.File newFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileHostingService/AddNewFile", ReplyAction="http://tempuri.org/IFileHostingService/AddNewFileResponse")]
        System.Threading.Tasks.Task<FileHosting.ServiceReference1.File> AddNewFileAsync(FileHosting.ServiceReference1.File newFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileHostingService/DownloadFile", ReplyAction="http://tempuri.org/IFileHostingService/DownloadFileResponse")]
        byte[] DownloadFile(string fileName, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileHostingService/DownloadFile", ReplyAction="http://tempuri.org/IFileHostingService/DownloadFileResponse")]
        System.Threading.Tasks.Task<byte[]> DownloadFileAsync(string fileName, int userId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFileHostingServiceChannel : FileHosting.ServiceReference1.IFileHostingService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileHostingServiceClient : System.ServiceModel.ClientBase<FileHosting.ServiceReference1.IFileHostingService>, FileHosting.ServiceReference1.IFileHostingService {
        
        public FileHostingServiceClient() {
        }
        
        public FileHostingServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FileHostingServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileHostingServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileHostingServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public FileHosting.ServiceReference1.User RegistrNewUser(FileHosting.ServiceReference1.User newUser) {
            return base.Channel.RegistrNewUser(newUser);
        }
        
        public System.Threading.Tasks.Task<FileHosting.ServiceReference1.User> RegistrNewUserAsync(FileHosting.ServiceReference1.User newUser) {
            return base.Channel.RegistrNewUserAsync(newUser);
        }
        
        public FileHosting.ServiceReference1.User CheckEnterUserPassword(string userName, string password) {
            return base.Channel.CheckEnterUserPassword(userName, password);
        }
        
        public System.Threading.Tasks.Task<FileHosting.ServiceReference1.User> CheckEnterUserPasswordAsync(string userName, string password) {
            return base.Channel.CheckEnterUserPasswordAsync(userName, password);
        }
        
        public void UpdateFileInfo(FileHosting.ServiceReference1.File editFile) {
            base.Channel.UpdateFileInfo(editFile);
        }
        
        public System.Threading.Tasks.Task UpdateFileInfoAsync(FileHosting.ServiceReference1.File editFile) {
            return base.Channel.UpdateFileInfoAsync(editFile);
        }
        
        public void DeleteFile(int fileId, string fileName, int userId) {
            base.Channel.DeleteFile(fileId, fileName, userId);
        }
        
        public System.Threading.Tasks.Task DeleteFileAsync(int fileId, string fileName, int userId) {
            return base.Channel.DeleteFileAsync(fileId, fileName, userId);
        }
        
        public FileHosting.ServiceReference1.File AddNewFile(FileHosting.ServiceReference1.File newFile) {
            return base.Channel.AddNewFile(newFile);
        }
        
        public System.Threading.Tasks.Task<FileHosting.ServiceReference1.File> AddNewFileAsync(FileHosting.ServiceReference1.File newFile) {
            return base.Channel.AddNewFileAsync(newFile);
        }
        
        public byte[] DownloadFile(string fileName, int userId) {
            return base.Channel.DownloadFile(fileName, userId);
        }
        
        public System.Threading.Tasks.Task<byte[]> DownloadFileAsync(string fileName, int userId) {
            return base.Channel.DownloadFileAsync(fileName, userId);
        }
    }
}
